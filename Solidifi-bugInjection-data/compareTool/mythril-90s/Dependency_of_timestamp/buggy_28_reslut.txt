==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: HYDROGEN

Function name: bug_tmstmp20()

PC address: 2319

Estimated Gas Usage: 197 - 292

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_28.sol:83



require(now != pastBlockTime_tmstmp20)



--------------------

Initial State:



Account: [CREATOR], balance: 0x104000060000020, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: HYDROGEN

Function name: bug_tmstmp20()

PC address: 2334

Estimated Gas Usage: 226 - 321

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_28.sol:85



if(now % 15 == 0) { // winner    //bug //Dependency_of_timestamp bug

            msg.sender.transfer(address(this).balance);

        }



--------------------

Initial State:



Account: [CREATOR], balance: 0x147000460000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: HYDROGEN

Function name: play_tmstmp30(uint256)

PC address: 3324

Estimated Gas Usage: 243 - 338

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_28.sol:54



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp30 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x42800000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp30(uint256), txdata: 0x38861bd80000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: HYDROGEN

Function name: play_tmstmp10(uint256)

PC address: 3542

Estimated Gas Usage: 242 - 337

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_28.sol:275



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp10 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x36000000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp10(uint256), txdata: 0x5d2cadbf0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: HYDROGEN

Function name: play_tmstmp11(uint256)

PC address: 4523

Estimated Gas Usage: 244 - 339

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_28.sol:250



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp11 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x528008aac04800000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp11(uint256), txdata: 0xc99d77a10000000000000000000000000000000000000000000000000000000000000000, value: 0x0





