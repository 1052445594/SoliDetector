==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: withdrawBalance_re_ent19()

PC address: 4719

Estimated Gas Usage: 1936 - 2221

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:291



     if (amountToWithdraw > 0) 



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdrawBalance_re_ent19(), txdata: 0x4ca6972a, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: BIGBOMBv2

Function name: withdraw_balances_re_ent11()

PC address: 6025

Estimated Gas Usage: 6977 - 61545

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_38.sol:490



ces_re_ent11[msg.sender] = 0;

   



--------------------

Initial State:



Account: [CREATOR], balance: 0x4f960cf3002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent11(), txdata: 0x8cb21c8e, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: BIGBOMBv2

Function name: withdraw_balances_re_ent21()

PC address: 6505

Estimated Gas Usage: 1942 - 36320

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_38.sol:209



msg.sender.call.value(balances_re_ent21[msg.sender ])("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent21(), txdata: 0x96c176f9, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: BIGBOMBv2

Function name: bug_re_ent15()

PC address: 6760

Estimated Gas Usage: 7670 - 61858

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_38.sol:411



     revert();

        }

        n



--------------------

Initial State:



Account: [CREATOR], balance: 0x21c10c0542640002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000

Caller: [ATTACKER], function: bug_re_ent15(), txdata: 0x9a9cb105, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: BIGBOMBv2

Function name: bug_re_ent15()

PC address: 6760

Estimated Gas Usage: 7670 - 61858

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_38.sol:411



     revert();

        }

        n



--------------------

Initial State:



Account: [CREATOR], balance: 0x40181080503840004, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x420010805400c0000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000

Caller: [ATTACKER], function: bug_re_ent15(), txdata: 0x9a9cb105, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: BIGBOMBv2

Function name: bug_re_ent15()

PC address: 6832

Estimated Gas Usage: 7670 - 61858

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_38.sol:416



6 addedValue) public return



--------------------

Initial State:



Account: [CREATOR], balance: 0x401c10d1142200002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000

Caller: [ATTACKER], function: bug_re_ent15(), txdata: 0x9a9cb105, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: BIGBOMBv2

Function name: bug_re_ent15()

PC address: 6838

Estimated Gas Usage: 7670 - 61858

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_38.sol:416



6 addedValue) public return



--------------------

Initial State:



Account: [CREATOR], balance: 0x401c10d1142200002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xde0b6b3a7640000

Caller: [ATTACKER], function: bug_re_ent15(), txdata: 0x9a9cb105, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: BIGBOMBv2

Function name: withdrawBalance_re_ent33()

PC address: 7688

Estimated Gas Usage: 6987 - 61555

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_38.sol:74



msg.sender.call.value(userBalance_re_ent33[msg.sender])("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: BIGBOMBv2

Function name: withdrawBalance_re_ent33()

PC address: 7772

Estimated Gas Usage: 6987 - 61555

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_38.sol:78



userBalance_re_ent33[msg.sender] = 0



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Low

Contract: BIGBOMBv2

Function name: buyTicket_re_ent12()

PC address: 8204

Estimated Gas Usage: 14186 - 88374

Read of persistent state following external call

The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_38.sol:474



  }



  function burn(uint256 amo



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: buyTicket_re_ent12(), txdata: 0xe9d0bb81, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Low

Contract: BIGBOMBv2

Function name: buyTicket_re_ent12()

PC address: 8218

Estimated Gas Usage: 14186 - 88374

Write to persistent state following external call

The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_38.sol:474



  }



  function burn(uint256 amo



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: buyTicket_re_ent12(), txdata: 0xe9d0bb81, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Low

Contract: BIGBOMBv2

Function name: buyTicket_re_ent12()

PC address: 8223

Estimated Gas Usage: 14186 - 88374

Write to persistent state following external call

The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_38.sol:476



ernal {

    _burn(msg.sender, amount);

  }





--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: buyTicket_re_ent12(), txdata: 0xe9d0bb81, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: BIGBOMBv2

Function name: withdraw_balances_re_ent1()

PC address: 8280

Estimated Gas Usage: 1948 - 36326

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_38.sol:537



der] = 0;

     }

}





--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: BIGBOMBv2

Function name: findfourPercent(uint256)

PC address: 8519

Estimated Gas Usage: 1216 - 1311

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_38.sol:44



add(a,m)



--------------------

Initial State:



Account: [CREATOR], balance: 0x48202400000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: findfourPercent(uint256), txdata: 0xd7de7323ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c, value: 0x0





