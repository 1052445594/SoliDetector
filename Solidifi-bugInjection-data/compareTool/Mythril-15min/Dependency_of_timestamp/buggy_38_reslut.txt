==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: bug_tmstmp20()

PC address: 2319

Estimated Gas Usage: 197 - 292

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:83



require(now != pastBlockTime_tmstmp20)



--------------------

Initial State:



Account: [CREATOR], balance: 0x2d00, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: bug_tmstmp20()

PC address: 2334

Estimated Gas Usage: 226 - 321

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:85



if(now % 15 == 0) { // winner    //bug //Dependency_of_timestamp bug

            msg.sender.transfer(address(this).balance);

        }



--------------------

Initial State:



Account: [CREATOR], balance: 0x200402000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: BIGBOMBv2

Function name: bug_tmstmp20()

PC address: 2357

Estimated Gas Usage: 1800 - 35988

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_38.sol:86



msg.sender.transfer(address(this).balance)



--------------------

Initial State:



Account: [CREATOR], balance: 0x21fdf2c, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x8c000224090e4250, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x1

Caller: [ATTACKER], function: bug_tmstmp28(), txdata: 0x56a3ed38, value: 0x8ac7230489e80000



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: name()

PC address: 2410

Estimated Gas Usage: 2433 - 4174

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:78



return _name



--------------------

Initial State:



Account: [CREATOR], balance: 0x421c1080000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: BIGBOMBv2

Function name: multiTransfer(address[],uint256[])

PC address: 2710

Estimated Gas Usage: 1060 - 6891

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_38.sol:226



function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {

    for (uint256 i = 0; i < receivers.length; i++) {

      transfer(receivers[i], amounts[i]);

    }

  }



--------------------

Initial State:



Account: [CREATOR], balance: 0x40101340000001002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp15(uint256)

PC address: 3239

Estimated Gas Usage: 6148 - 26243

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:193



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: play_tmstmp15(uint256), txdata: 0x2d79f3ccfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp15(uint256)

PC address: 3246

Estimated Gas Usage: 290 - 385

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:193



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp15 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x522c0500000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: play_tmstmp15(uint256), txdata: 0x2d79f3cc0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp26(uint256)

PC address: 3284

Estimated Gas Usage: 6187 - 26282

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:130



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x2480c0000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp26(uint256), txdata: 0x35e7405ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp26(uint256)

PC address: 3290

Estimated Gas Usage: 331 - 426

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:130



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp26 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: play_tmstmp26(uint256), txdata: 0x35e7405f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp30(uint256)

PC address: 3318

Estimated Gas Usage: 6099 - 26194

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:54



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x21c1000000000010, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp30(uint256), txdata: 0x38861bd8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp30(uint256)

PC address: 3324

Estimated Gas Usage: 243 - 338

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:54



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp30 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x18460000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: play_tmstmp30(uint256), txdata: 0x38861bd80000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp10(uint256)

PC address: 3536

Estimated Gas Usage: 6098 - 26193

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:275



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x421c1000000000002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp10(uint256), txdata: 0x5d2cadbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp10(uint256)

PC address: 3542

Estimated Gas Usage: 242 - 337

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:275



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp10 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x28000000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: play_tmstmp10(uint256), txdata: 0x5d2cadbf0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp3(uint256)

PC address: 3570

Estimated Gas Usage: 6125 - 26220

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:60



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: play_tmstmp3(uint256), txdata: 0x621563ebfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp3(uint256)

PC address: 3577

Estimated Gas Usage: 267 - 362

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:60



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp3 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x1c4500000010000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp3(uint256), txdata: 0x621563eb0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp23(uint256)

PC address: 3779

Estimated Gas Usage: 6148 - 26243

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:150



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: play_tmstmp23(uint256), txdata: 0x7cd2ce0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp23(uint256)

PC address: 3786

Estimated Gas Usage: 290 - 385

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:150



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp23 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x20000b00000020001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp23(uint256), txdata: 0x7cd2ce0f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp27(uint256)

PC address: 3815

Estimated Gas Usage: 6170 - 26265

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:124



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: play_tmstmp27(uint256), txdata: 0x8d356d07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp27(uint256)

PC address: 3822

Estimated Gas Usage: 312 - 407

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:124



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp27 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x43f74000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: play_tmstmp27(uint256), txdata: 0x8d356d070000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: symbol()

PC address: 3871

Estimated Gas Usage: 2498 - 4239

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:91



return _symbol



--------------------

Initial State:



Account: [CREATOR], balance: 0x421c1080000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp18(uint256)

PC address: 3948

Estimated Gas Usage: 6098 - 26193

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:164



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1c0080000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp18(uint256), txdata: 0x9c37a567fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp18(uint256)

PC address: 3954

Estimated Gas Usage: 242 - 337

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:164



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp18 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x40020401400424080, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp18(uint256), txdata: 0x9c37a5670000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp2(uint256)

PC address: 3982

Estimated Gas Usage: 6128 - 26223

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:95



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0xa04402400000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp2(uint256), txdata: 0x9d595776fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp2(uint256)

PC address: 3988

Estimated Gas Usage: 264 - 359

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:95



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp2 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x4307dc00000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp2(uint256), txdata: 0x9d5957760000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp19(uint256)

PC address: 4021

Estimated Gas Usage: 6147 - 26242

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:104



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: play_tmstmp19(uint256), txdata: 0xa0c95111fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp19(uint256)

PC address: 4028

Estimated Gas Usage: 289 - 384

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:104



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp19 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x80000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp19(uint256), txdata: 0xa0c951110000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp11(uint256)

PC address: 4441

Estimated Gas Usage: 6191 - 26286

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:250



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x20, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: play_tmstmp11(uint256), txdata: 0xc99d77a1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp11(uint256)

PC address: 4448

Estimated Gas Usage: 333 - 428

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:250



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp11 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x208a2000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp11(uint256), txdata: 0xc99d77a10000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp22(uint256)

PC address: 4477

Estimated Gas Usage: 6097 - 26192

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:155



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x157e7c0051db9, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp22(uint256), txdata: 0xcf206f53fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0080, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp22(uint256)

PC address: 4483

Estimated Gas Usage: 241 - 336

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:155



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp22 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x52bc7500000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x400, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: play_tmstmp22(uint256), txdata: 0xcf206f530000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: BIGBOMBv2

Function name: play_tmstmp14(uint256)

PC address: 4629

Estimated Gas Usage: 6163 - 26258

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_38.sol:203



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: play_tmstmp14(uint256), txdata: 0xecd97e16fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: BIGBOMBv2

Function name: play_tmstmp14(uint256)

PC address: 4635

Estimated Gas Usage: 307 - 402

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_38.sol:203



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp14 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x20000002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: play_tmstmp14(uint256), txdata: 0xecd97e160000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: BIGBOMBv2

Function name: decreaseAllowance(address,uint256)

PC address: 4667

Estimated Gas Usage: 1375 - 1850

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_38.sol:290



_allowed[msg.sender][spender].sub(subtractedValue)



--------------------

Initial State:



Account: [CREATOR], balance: 0x3f1c127e68083e342, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: BIGBOMBv2

Function name: findfourPercent(uint256)

PC address: 4688

Estimated Gas Usage: 1149 - 1244

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_38.sol:44



add(a,m)



--------------------

Initial State:



Account: [CREATOR], balance: 0x420ff700000000002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: findfourPercent(uint256), txdata: 0xd7de7323ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc, value: 0x0





