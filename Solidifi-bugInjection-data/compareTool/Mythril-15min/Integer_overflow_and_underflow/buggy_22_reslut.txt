==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: owned

Function name: increaseLockTime_intou33(uint256)

PC address: 484

Estimated Gas Usage: 6117 - 26402

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:25



lockTime_intou33[msg.sender] += _secondsToIncrease



--------------------

Initial State:



Account: [CREATOR], balance: 0x4000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x4000000001, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: increaseLockTime_intou33(uint256), txdata: 0x7d756971a000000000000000000000000000000000000000000000000000000000000000, value: 0x0

Caller: [CREATOR], function: increaseLockTime_intou33(uint256), txdata: 0x7d7569717c39002a04000012060a100100448a4001100008008884048000000200088008, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: owned

Function name: withdraw_intou33()

PC address: 525

Estimated Gas Usage: 1014 - 1299

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_22.sol:28



require(now > lockTime_intou33[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x1000000000020, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: tokenRecipient

Function name: receiveApproval(address,uint256,address,bytes)

PC address: 586

Estimated Gas Usage: 3538 - 42876

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_22.sol:62



t.transferFrom(_from, address(this), _value)



--------------------

Initial State:



Account: [CREATOR], balance: 0x4, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000015, value: 0x0

Caller: [SOMEGUY], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb124242424242424242424242424242424240000000000000000000000000000000000000000000000000000000000000018242424242424242424242424242424242424242424242424242424deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000011, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: owned

Function name: withdraw_intou5()

PC address: 599

Estimated Gas Usage: 1039 - 1324

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_22.sol:13



require(now > lockTime_intou5[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou5(), txdata: 0xc017a750, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: owned

Function name: increaseLockTime_intou5(uint256)

PC address: 624

Estimated Gas Usage: 6119 - 26404

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:10



lockTime_intou5[msg.sender] += _secondsToIncrease



--------------------

Initial State:



Account: [CREATOR], balance: 0x200000000006c108, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: increaseLockTime_intou5(uint256), txdata: 0xe4a2d07f4000000000000000000000000000000000000000000000000000000000000000, value: 0x0

Caller: [SOMEGUY], function: increaseLockTime_intou5(uint256), txdata: 0xe4a2d07fc801400010000220405108540800900000002020000040080008000000020400, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: tokenRecipient

Function name: transfer_intou30(address,uint256)

PC address: 877

Estimated Gas Usage: 12114 - 52775

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:77



balances_intou30[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: tokenRecipient

Function name: transfer_intou30(address,uint256)

PC address: 902

Estimated Gas Usage: 12114 - 52775

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:78



balances_intou30[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x42100000000000002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou30(address,uint256), txdata: 0xc036563e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: proposals(uint256)

PC address: 4012

Estimated Gas Usage: 1119 - 1214

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_22.sol:233



Proposal[] public proposals



--------------------

Initial State:



Account: [CREATOR], balance: 0x21c000000207aff9, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: proposals(uint256), txdata: 0x013cf08b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou18(address,uint256)

PC address: 4356

Estimated Gas Usage: 12151 - 52812

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:551



balances_intou18[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x204000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou18(address,uint256), txdata: 0x1fa78c9900000000000000000000000000000000040008000000000200000180400204800400040404000000000001000000800000000000000000000400040004000801, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou18(address,uint256)

PC address: 4376

Estimated Gas Usage: 12151 - 52812

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:552



balances_intou18[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x10c0402000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou18(address,uint256), txdata: 0x1fa78c99000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafffc545fefc3bfffffffffffffffe10340080000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: executeProposal(uint256,bytes)

PC address: 4419

Estimated Gas Usage: 1517 - 4294

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_22.sol:564



function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {

        Proposal storage p = proposals[proposalNumber];



        require(initialized);

        require(now > p.minExecutionDate                                             // If it is past the voting deadline

            && !p.executed                                                          // and it has not already been executed

            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))); // and the supplied code matches the proposal...





        // ...then tally the results

        uint quorum = 0;

        uint yea = 0;

        uint nay = 0;



        for (uint i = 0; i <  p.votes.length; ++i) {

            Vote storage v = p.votes[i];

            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);

            quorum += voteWeight;

            if (v.inSupport) {

                yea += voteWeight;

            } else {

                nay += voteWeight;

            }

        }



        Token t = Token(tokenAddress);

        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100)); // Check if a minimum quorum has been reached



        if (yea > nay ) {

            // Proposal passed; execute the transaction



            p.executed = true;

            

            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);

            require(success);



            p.proposalPassed = true;

        } else {

            // Proposal failed

            p.proposalPassed = false;

        }



        // Fire Events

        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);

    }



--------------------

Initial State:



Account: [CREATOR], balance: 0x20240c00000404fd0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x100000000000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: executeProposal(uint256,bytes), txdata: 0x237e949200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: MindsyncPlatform

Function name: withdraw_intou17()

PC address: 5419

Estimated Gas Usage: 1082 - 1367

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_22.sol:615



require(now > lockTime_intou17[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: withdraw_intou33()

PC address: 5445

Estimated Gas Usage: 1889 - 36267

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:617



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0xd, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: withdraw_intou17()

PC address: 5445

Estimated Gas Usage: 1890 - 36268

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:617



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0xe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: withdraw_intou21()

PC address: 5445

Estimated Gas Usage: 1913 - 36291

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:617



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0x16, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffffa, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou21(), txdata: 0x81bb4758, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: withdraw_intou37()

PC address: 5445

Estimated Gas Usage: 1934 - 36312

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:617



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0xd, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou37(), txdata: 0xc2bc6798, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: withdraw_intou13()

PC address: 5445

Estimated Gas Usage: 1934 - 36312

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:617



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0xd, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffffc, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: withdraw_intou5()

PC address: 5445

Estimated Gas Usage: 1958 - 36336

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:617



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0xe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ff804, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou5(), txdata: 0xc017a750, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: withdraw_ovrflow1()

PC address: 5445

Estimated Gas Usage: 1956 - 36334

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:617



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0x16, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffffc, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_ovrflow1(), txdata: 0x76be3cd1, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_undrflow2(address,uint256)

PC address: 5494

Estimated Gas Usage: 12201 - 52862

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:486



balances_intou2[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0xc00000eaf3c, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_undrflow2(address,uint256), txdata: 0x37ae6b7300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_undrflow2(address,uint256)

PC address: 5519

Estimated Gas Usage: 12201 - 52862

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:487



balances_intou2[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x21c10400020ebfb8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_undrflow2(address,uint256), txdata: 0x37ae6b73000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefe000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou34(address,uint256)

PC address: 5553

Estimated Gas Usage: 12158 - 52819

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:260



balances_intou34[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x20fbfb8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou34(address,uint256), txdata: 0x46852dfc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou34(address,uint256)

PC address: 5578

Estimated Gas Usage: 12158 - 52819

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:261



balances_intou34[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x4000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transfer_intou34(address,uint256), txdata: 0x46852dfc000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffec000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: MindsyncPlatform

Function name: withdraw_intou13()

PC address: 5848

Estimated Gas Usage: 1126 - 1411

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_22.sol:281



require(now > lockTime_intou13[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: MindsyncPlatform

Function name: withdraw_ovrflow1()

PC address: 5917

Estimated Gas Usage: 1148 - 1433

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_22.sol:311



require(now > lockTime_intou1[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_ovrflow1(), txdata: 0x76be3cd1, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou38(address,uint256)

PC address: 5967

Estimated Gas Usage: 12156 - 52817

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:229



balances_intou38[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x207bbbe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou38(address,uint256), txdata: 0x7daba89100000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou38(address,uint256)

PC address: 5992

Estimated Gas Usage: 12156 - 52817

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:230



balances_intou38[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x1482b000281444c, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou38(address,uint256), txdata: 0x7daba891000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: MindsyncPlatform

Function name: withdraw_intou21()

PC address: 6027

Estimated Gas Usage: 1105 - 1390

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_22.sol:415



require(now > lockTime_intou21[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x20000000000cfffc, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou21(), txdata: 0x81bb4758, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: MindsyncPlatform

Function name: receiveApproval(address,uint256,address,bytes)

PC address: 6139

Estimated Gas Usage: 3707 - 43233

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_22.sol:62



t.transferFrom(_from, address(this), _value)



--------------------

Initial State:



Account: [CREATOR], balance: 0x8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou14(address,uint256)

PC address: 6469

Estimated Gas Usage: 12179 - 52840

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:270



balances_intou14[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0xfbfbf, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou14(address,uint256), txdata: 0xaefa551900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou14(address,uint256)

PC address: 6494

Estimated Gas Usage: 12179 - 52840

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:271



balances_intou14[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x2011050010c10344c, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou14(address,uint256), txdata: 0xaefa5519000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: MindsyncPlatform

Function name: withdraw_intou33()

PC address: 7169

Estimated Gas Usage: 1081 - 1366

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_22.sol:28



require(now > lockTime_intou33[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: MindsyncPlatform

Function name: withdraw_intou5()

PC address: 7244

Estimated Gas Usage: 1150 - 1435

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_22.sol:13



require(now > lockTime_intou5[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou5(), txdata: 0xc017a750, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou30(address,uint256)

PC address: 7270

Estimated Gas Usage: 12135 - 52796

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:77



balances_intou30[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x202000000000006b1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou30(address,uint256)

PC address: 7295

Estimated Gas Usage: 12135 - 52796

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:78



balances_intou30[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transfer_intou30(address,uint256), txdata: 0xc036563e000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffec000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou10(address,uint256)

PC address: 7323

Estimated Gas Usage: 12157 - 52818

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:300



balances_intou10[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x140009000204240a, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transfer_intou10(address,uint256), txdata: 0xc176237300000000000000000000000010040404010004000000000404042010400020000000000000000400000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou10(address,uint256)

PC address: 7348

Estimated Gas Usage: 12157 - 52818

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:301



balances_intou10[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x1040900002100000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou10(address,uint256), txdata: 0xc1762373000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: MindsyncPlatform

Function name: withdraw_intou37()

PC address: 7377

Estimated Gas Usage: 1126 - 1411

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_22.sol:240



require(now > lockTime_intou37[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x4, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou37(), txdata: 0xc2bc6798, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: vote(uint256,bool)

PC address: 7529

Estimated Gas Usage: 4353 - 39010

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_22.sol:530



function vote(

        uint proposalNumber,

        bool supportsProposal

    )

        onlyTokenholders public

        returns (uint voteID)

    {

        Proposal storage p = proposals[proposalNumber];

        require(p.voted[msg.sender] != true);



        voteID = p.votes.length++;

        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});

        p.voted[msg.sender] = true;

        p.numberOfVotes = voteID +1;

        emit Voted(proposalNumber,  supportsProposal, msg.sender);

        return voteID;

    }



--------------------

Initial State:



Account: [CREATOR], balance: 0xafbc, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: vote(uint256,bool), txdata: 0xc9d27afe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou22(address,uint256)

PC address: 7864

Estimated Gas Usage: 12200 - 52861

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:380



balances_intou22[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x4802000004001c502, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x200000000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou22(address,uint256), txdata: 0xd7f8581a00000000000000000000000000000000010002000100001002800801020400020000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: MindsyncPlatform

Function name: transfer_intou22(address,uint256)

PC address: 7889

Estimated Gas Usage: 12200 - 52861

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_22.sol:381



balances_intou22[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x200c0122c4001000b, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transfer_intou22(address,uint256), txdata: 0xd7f8581a000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe4000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: checkProposalCode(uint256,address,uint256,bytes)

PC address: 8269

Estimated Gas Usage: 1499 - 4276

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_22.sol:470



function checkProposalCode(

        uint proposalNumber,

        address destination,

        uint weiAmount,

        bytes memory transactionBytecode

    )

        view public

        returns (bool codeChecksOut)

    {

        Proposal storage p = proposals[proposalNumber];

        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));

    }



--------------------

Initial State:



Account: [CREATOR], balance: 0x40007bfbe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: checkProposalCode(uint256,address,uint256,bytes), txdata: 0xeceb294500000000000000000000000000000000000000000000000000000000000000000000000000000000004f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a, value: 0x0





