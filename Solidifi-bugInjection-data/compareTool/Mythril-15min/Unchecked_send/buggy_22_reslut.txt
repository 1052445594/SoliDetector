==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: owned

Function name: withdrawBal_unchk41()

PC address: 357

Estimated Gas Usage: 906 - 35094

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:9



msg.sender.send(Balances_unchk41)



--------------------

Initial State:



Account: [CREATOR], balance: 0x8000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

Caller: [SOMEGUY], function: withdrawBal_unchk41(), txdata: 0x240987ad, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: owned

Function name: bug_unchk_send32()

PC address: 391

Estimated Gas Usage: 896 - 35084

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:31



msg.sender.send(1 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0xe00000000000001, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send32(), txdata: 0x58d9161f, value: 0xde0b6b3a7640000



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: tokenRecipient

Function name: bug_unchk15(address)

PC address: 441

Estimated Gas Usage: 957 - 35145

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:42



addr.send (42 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send30(), txdata: 0xdc52a049, value: 0x254beb02d1dcc0000

Caller: [CREATOR], function: bug_unchk15(address), txdata: 0x0f80b6ae0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: tokenRecipient

Function name: bug_unchk15(address)

PC address: 441

Estimated Gas Usage: 957 - 35145

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:42



addr.send (42 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x21c0000000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x4000000000006479c, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send30(), txdata: 0xdc52a049, value: 0x254beb02d1dcc0000

Caller: [ATTACKER], function: bug_unchk15(address), txdata: 0x0f80b6ae000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: tokenRecipient

Function name: receiveApproval(address,uint256,address,bytes)

PC address: 541

Estimated Gas Usage: 3583 - 43109

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_22.sol:47



t.transferFrom(_from, address(this), _value)



--------------------

Initial State:



Account: [CREATOR], balance: 0x20, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb100000000000000000000000000000000000000000000000000000000000000330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: tokenRecipient

Function name: bug_unchk_send30()

PC address: 837

Estimated Gas Usage: 940 - 35128

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:51



msg.sender.send(1 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb100000000000000000000000000000000000000000000000000000000000000003b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send30(), txdata: 0xdc52a049, value: 0xde0b6b3a7640000



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: proposals(uint256)

PC address: 2874

Estimated Gas Usage: 1074 - 1169

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_22.sol:191



Proposal[] public proposals



--------------------

Initial State:



Account: [CREATOR], balance: 0x200000000003bfdd, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: proposals(uint256), txdata: 0x013cf08b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: MindsyncPlatform

Function name: bug_unchk_send17()

PC address: 3136

Estimated Gas Usage: 1030 - 35218

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:507



msg.sender.send(1 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x2022f26291e000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send31(), txdata: 0xafcccbb4, value: 0xde0b6b3a7640000



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: bug_unchk_send17()

PC address: 3136

Estimated Gas Usage: 1030 - 35218

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:507



msg.sender.send(1 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x16ffffcc7f7f, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x6201573800000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x1

Caller: [ATTACKER], function: bug_unchk_send31(), txdata: 0xafcccbb4, value: 0xde0b6b3a763ffff



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: MindsyncPlatform

Function name: bug_unchk15(address)

PC address: 3231

Estimated Gas Usage: 1114 - 35302

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:42



addr.send (42 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x24e6e897b10000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x246ddf97976680000

Caller: [SOMEGUY], function: bug_unchk15(address), txdata: 0x0f80b6ae0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: bug_unchk15(address)

PC address: 3231

Estimated Gas Usage: 1114 - 35302

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:42



addr.send (42 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x480013c4000100002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x14000480000080000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x246ddf97976680000

Caller: [ATTACKER], function: bug_unchk15(address), txdata: 0x0f80b6ae000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: MindsyncPlatform

Function name: UncheckedExternalCall_unchk40()

PC address: 3283

Estimated Gas Usage: 976 - 35164

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:167



addr_unchk40.send (2 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: UncheckedExternalCall_unchk40(), txdata: 0x216ea3a2, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: executeProposal(uint256,bytes)

PC address: 3306

Estimated Gas Usage: 1472 - 4249

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_22.sol:461



function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {

        Proposal storage p = proposals[proposalNumber];



        require(initialized);

        require(now > p.minExecutionDate                                             // If it is past the voting deadline

            && !p.executed                                                          // and it has not already been executed

            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))); // and the supplied code matches the proposal...





        // ...then tally the results

        uint quorum = 0;

        uint yea = 0;

        uint nay = 0;



        for (uint i = 0; i <  p.votes.length; ++i) {

            Vote storage v = p.votes[i];

            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);

            quorum += voteWeight;

            if (v.inSupport) {

                yea += voteWeight;

            } else {

                nay += voteWeight;

            }

        }



        Token t = Token(tokenAddress);

        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100)); // Check if a minimum quorum has been reached



        if (yea > nay ) {

            // Proposal passed; execute the transaction



            p.executed = true;

            

            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);

            require(success);



            p.proposalPassed = true;

        } else {

            // Proposal failed

            p.proposalPassed = false;

        }



        // Fire Events

        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);

    }



--------------------

Initial State:



Account: [CREATOR], balance: 0x207bfa8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: executeProposal(uint256,bytes), txdata: 0x237e949200000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: MindsyncPlatform

Function name: withdrawBal_unchk41()

PC address: 4314

Estimated Gas Usage: 1018 - 35206

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:9



msg.sender.send(Balances_unchk41)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdrawBal_unchk41(), txdata: 0x240987ad, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: MindsyncPlatform

Function name: unhandledsend_unchk14(address)

PC address: 4357

Estimated Gas Usage: 1113 - 35301

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:213



callee.send(5 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x4075a90c120000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x4563918244f40000

Caller: [SOMEGUY], function: unhandledsend_unchk14(address), txdata: 0x24ebdd340000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: unhandledsend_unchk14(address)

PC address: 4357

Estimated Gas Usage: 1113 - 35301

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:213



callee.send(5 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x429c9a0aacd641000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x40040000020224, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x4563918244f40000

Caller: [ATTACKER], function: unhandledsend_unchk14(address), txdata: 0x24ebdd34000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: MindsyncPlatform

Function name: cash_unchk34(uint256,uint256,address)

PC address: 4402

Estimated Gas Usage: 1177 - 35365

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:207



winner_unchk34.send(subpot_unchk34)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1d3649d4221e8242b, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000

Caller: [ATTACKER], function: cash_unchk34(uint256,uint256,address), txdata: 0x2b2f46d1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: cash_unchk34(uint256,uint256,address)

PC address: 4402

Estimated Gas Usage: 1177 - 35365

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:207



winner_unchk34.send(subpot_unchk34)



--------------------

Initial State:



Account: [CREATOR], balance: 0x49591111053840008, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000

Caller: [ATTACKER], function: cash_unchk34(uint256,uint256,address), txdata: 0x2b2f46d100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: MindsyncPlatform

Function name: my_func_uncheck36(address)

PC address: 4444

Estimated Gas Usage: 1174 - 35645

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_22.sol:197



dst.call.value(msg.value)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x2000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: my_func_uncheck36(address), txdata: 0x550c16d4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: MindsyncPlatform

Function name: my_func_uncheck36(address)

PC address: 4444

Estimated Gas Usage: 1174 - 35645

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:197



dst.call.value(msg.value)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x2000000000002000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: my_func_uncheck36(address), txdata: 0x550c16d40000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: MindsyncPlatform

Function name: bug_unchk39(address)

PC address: 4538

Estimated Gas Usage: 1135 - 35323

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:186



addr.send (4 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x5880694eae9001a8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x4000000800000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x3782dace9d900000

Caller: [ATTACKER], function: bug_unchk39(address), txdata: 0x58dbb19c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: MindsyncPlatform

Function name: bug_unchk39(address)

PC address: 4538

Estimated Gas Usage: 1135 - 35323

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_22.sol:186



addr.send (4 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x4d041d869f800001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0xa100, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x3782dace9d900000

Caller: [ATTACKER], function: bug_unchk39(address), txdata: 0x58dbb19c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: MindsyncPlatform

Function name: my_func_unchk35(address)

PC address: 4830

Estimated Gas Usage: 1051 - 35239

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_22.sol:201



dst.send(msg.value)



--------------------

Initial State:



Account: [CREATOR], balance: 0x40000000000480000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: my_func_unchk11(address), txdata: 0xc7b3ccc80000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: MindsyncPlatform

Function name: receiveApproval(address,uint256,address,bytes)

PC address: 4945

Estimated Gas Usage: 3685 - 43211

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_22.sol:47



t.transferFrom(_from, address(this), _value)



--------------------

Initial State:



Account: [CREATOR], balance: 0x20000000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002200000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000025, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: vote(uint256,bool)

PC address: 6023

Estimated Gas Usage: 4397 - 39054

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_22.sol:432



function vote(

        uint proposalNumber,

        bool supportsProposal

    )

        onlyTokenholders public

        returns (uint voteID)

    {

        Proposal storage p = proposals[proposalNumber];

        require(p.voted[msg.sender] != true);



        voteID = p.votes.length++;

        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});

        p.voted[msg.sender] = true;

        p.numberOfVotes = voteID +1;

        emit Voted(proposalNumber,  supportsProposal, msg.sender);

        return voteID;

    }



--------------------

Initial State:



Account: [CREATOR], balance: 0x420042000093a8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: vote(uint256,bool), txdata: 0xc9d27afe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: checkProposalCode(uint256,address,uint256,bytes)

PC address: 6695

Estimated Gas Usage: 1477 - 4254

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_22.sol:378



function checkProposalCode(

        uint proposalNumber,

        address destination,

        uint weiAmount,

        bytes memory transactionBytecode

    )

        view public

        returns (bool codeChecksOut)

    {

        Proposal storage p = proposals[proposalNumber];

        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));

    }



--------------------

Initial State:



Account: [CREATOR], balance: 0x2079ba0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: checkProposalCode(uint256,address,uint256,bytes), txdata: 0xeceb29450000000000000000000000000000000000000000000000000000000000000000001d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0





