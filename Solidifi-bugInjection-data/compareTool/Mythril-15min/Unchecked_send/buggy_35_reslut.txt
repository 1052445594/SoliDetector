==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: owned

Function name: bug_unchk15(address)

PC address: 429

Estimated Gas Usage: 980 - 35168

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_35.sol:123



addr.send (42 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x138000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send30(), txdata: 0xdc52a049, value: 0x254beb02d1dcc0000

Caller: [ATTACKER], function: bug_unchk15(address), txdata: 0x0f80b6ae0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: owned

Function name: bug_unchk15(address)

PC address: 429

Estimated Gas Usage: 980 - 35168

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_35.sol:123



addr.send (42 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x20000000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x37f66c8000000, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send30(), txdata: 0xdc52a049, value: 0x254beb02d1dcc0000

Caller: [ATTACKER], function: bug_unchk15(address), txdata: 0x0f80b6ae000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: owned

Function name: bug_unchk_send32()

PC address: 463

Estimated Gas Usage: 940 - 35128

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_35.sol:130



msg.sender.send(1 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x800, nonce:0, storage:{}

Account: [ATTACKER], balance: 0xde0bcf3b57040c0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: onlyOwnerTransferOwnership(address), txdata: 0xc5d9a28f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

Caller: [ATTACKER], function: bug_unchk_send30(), txdata: 0xdc52a049, value: 0xde0b6b3a7640000



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: owned

Function name: bug_unchk39(address)

PC address: 505

Estimated Gas Usage: 1024 - 35212

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_35.sol:118



addr.send (4 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x2080000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send30(), txdata: 0xdc52a049, value: 0x4563918244f40000

Caller: [ATTACKER], function: bug_unchk39(address), txdata: 0x58dbb19c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: owned

Function name: bug_unchk39(address)

PC address: 505

Estimated Gas Usage: 1024 - 35212

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_35.sol:118



addr.send (4 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x180100000048c02, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send30(), txdata: 0xdc52a049, value: 0x4563918244f40000

Caller: [ATTACKER], function: bug_unchk39(address), txdata: 0x58dbb19c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: owned

Function name: UncheckedExternalCall_unchk4()

PC address: 750

Estimated Gas Usage: 995 - 35183

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_35.sol:109



addr_unchk4.send (42 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: onlyOwnerTransferOwnership(address), txdata: 0xc5d9a28f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

Caller: [ATTACKER], function: UncheckedExternalCall_unchk4(), txdata: 0xeb46deb8, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: BitpayerDEX

Function name: bug_unchk_send17()

PC address: 2907

Estimated Gas Usage: 1008 - 35196

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_35.sol:402



msg.sender.send(1 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x248305060805a8e2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x50f0182d690000040, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send20(), txdata: 0x58ffa620, value: 0xde0b6b3a7640000



==== Dependence on predictable environment variable ====

SWC ID: 120

Severity: Low

Contract: BitpayerDEX

Function name: trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)

PC address: 3431

Estimated Gas Usage: 6802 - 43919

A control flow decision is made based on The block.number environment variable.

The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_35.sol:370



(orders[user][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == user) &&

      block.number <= expires &&

      orderFills[user][hash].add(amount) <= amountGet



--------------------

Initial State:



Account: [CREATOR], balance: 0x100010000bfbe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256), txdata: 0x0a19b14avalue: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 120

Severity: Low

Contract: BitpayerDEX

Function name: trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)

PC address: 3493

Estimated Gas Usage: 6816 - 43933

A control flow decision is made based on The block.number environment variable.

The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_35.sol:369



require((

      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == user) &&

      block.number <= expires &&

      orderFills[user][hash].add(amount) <= amountGet

    ))



--------------------

Initial State:



Account: [CREATOR], balance: 0x4373e, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256), txdata: 0x0a19b14avalue: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: BitpayerDEX

Function name: depositToken(address,uint256)

PC address: 5367

Estimated Gas Usage: 9129 - 65653

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_35.sol:329



ERC20Essential(token).transferFrom(msg.sender, address(this), amount)



--------------------

Initial State:



Account: [CREATOR], balance: 0x20000000000402fe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8b0367c01109000000b0b96949f6f522c30600e2d400000000000210248a2202, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: BitpayerDEX

Function name: depositToken(address,uint256)

PC address: 5453

Estimated Gas Usage: 9129 - 65653

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_35.sol:330



tokens[token][msg.sender]



--------------------

Initial State:



Account: [CREATOR], balance: 0x400000de, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef80001e7d2fff9ffffffc8ffffbf7cf7df59fdfdf0ddf96fffffffffbfd63e803, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: BitpayerDEX

Function name: depositToken(address,uint256)

PC address: 5510

Estimated Gas Usage: 9129 - 65653

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_35.sol:330



tokens[token][msg.sender] = tokens[token][msg.sender].add(amount)



--------------------

Initial State:



Account: [CREATOR], balance: 0x400000de, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: depositToken(address,uint256), txdata: 0x338b5dea000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef80001e7d2fff9ffffffc8ffffbf7cf7df59fdfdf0ddf96fffffffffbfd63e803, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: BitpayerDEX

Function name: my_func_uncheck36(address)

PC address: 5728

Estimated Gas Usage: 1195 - 35666

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_35.sol:178



dst.call.value(msg.value)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x21c10c04020febb6, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: my_func_uncheck12(address), txdata: 0xde7df662000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: BitpayerDEX

Function name: my_func_uncheck36(address)

PC address: 5728

Estimated Gas Usage: 1195 - 35666

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_35.sol:178



dst.call.value(msg.value)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0xe3da0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x3ffffffffff000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: my_func_uncheck12(address), txdata: 0xde7df6620000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: BitpayerDEX

Function name: my_func_unchk35(address)

PC address: 6195

Estimated Gas Usage: 1095 - 35283

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_35.sol:183



dst.send(msg.value)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1bfba, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x3ff7ffffffffce000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: my_func_unchk11(address), txdata: 0xc7b3ccc80000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: BitpayerDEX

Function name: withdrawToken(address,uint256)

PC address: 6538

Estimated Gas Usage: 11857 - 68953

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_35.sol:342



ERC20Essential(token).transfer(msg.sender, amount)



--------------------

Initial State:



Account: [CREATOR], balance: 0x400000000000fbc0a, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawToken(address,uint256), txdata: 0x9e281a98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: BitpayerDEX

Function name: withdrawToken(address,uint256)

PC address: 6618

Estimated Gas Usage: 11857 - 68953

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_35.sol:343



tokens[token][msg.sender]



--------------------

Initial State:



Account: [CREATOR], balance: 0xeae1e, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdrawToken(address,uint256), txdata: 0x9e281a98000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 120

Severity: Low

Contract: BitpayerDEX

Function name: availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)

PC address: 7713

Estimated Gas Usage: 6016 - 43133

A control flow decision is made based on The block.number environment variable.

The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_35.sol:408



if (!(

      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == user) &&

      block.number <= expires

    )) return 0



--------------------

Initial State:



Account: [CREATOR], balance: 0x10c000006bf38, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32), txdata: 0xfb6e155f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000200800040000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: BitpayerDEX

Function name: availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)

PC address: 7786

Estimated Gas Usage: 7099 - 44596

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_35.sol:349



function balanceOf(address token, address user) public view returns (uint) {

    return tokens[token][user];

  }



--------------------

Initial State:



Account: [CREATOR], balance: 0x4000004000207aede, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32), txdata: 0xfb6e155fvalue: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: BitpayerDEX

Function name: testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)

PC address: 7786

Estimated Gas Usage: 8189 - 46066

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_35.sol:349



function balanceOf(address token, address user) public view returns (uint) {

    return tokens[token][user];

  }



--------------------

Initial State:



Account: [CREATOR], balance: 0x100033fba, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address), txdata: 0x6c86888bvalue: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: BitpayerDEX

Function name: trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)

PC address: 8370

Estimated Gas Usage: 29398 - 133965

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_35.sol:349



function balanceOf(address token, address user) public view returns (uint) {

    return tokens[token][user];

  }



--------------------

Initial State:



Account: [CREATOR], balance: 0x417ae, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256), txdata: 0x0a19b14avalue: 0x0





