==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: HYDROGEN

Function name: bug_unchk_send17()

PC address: 2148

Estimated Gas Usage: 1030 - 35218

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_28.sol:196



msg.sender.send(1 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x250c04404082c80, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_unchk_send20(), txdata: 0x58ffa620, value: 0xde0b6b3a7640000



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: HYDROGEN

Function name: bug_unchk_send17()

PC address: 2148

Estimated Gas Usage: 1030 - 35218

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_28.sol:196



msg.sender.send(1 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x34c3988f3c, nonce:0, storage:{}

Account: [ATTACKER], balance: 0xe0040c000008080, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x1

Caller: [ATTACKER], function: bug_unchk_send20(), txdata: 0x58ffa620, value: 0xde0b6b3a763ffff



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: HYDROGEN

Function name: name()

PC address: 2182

Estimated Gas Usage: 2433 - 4174

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_28.sol:80



return _name



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: HYDROGEN

Function name: bug_unchk15(address)

PC address: 2511

Estimated Gas Usage: 1114 - 35302

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_28.sol:230



addr.send (42 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x5045fbcf578a898d0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x4000000000000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x246ddf97976680000

Caller: [ATTACKER], function: bug_unchk15(address), txdata: 0x0f80b6ae0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: HYDROGEN

Function name: bug_unchk15(address)

PC address: 2511

Estimated Gas Usage: 1114 - 35302

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_28.sol:230



addr.send (42 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x4213dfdba78700100, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x19000008688040000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x246ddf97976680000

Caller: [ATTACKER], function: bug_unchk15(address), txdata: 0x0f80b6ae000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: HYDROGEN

Function name: multiTransfer(address[],uint256[])

PC address: 2571

Estimated Gas Usage: 993 - 6824

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_28.sol:190



function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {

    for (uint256 i = 0; i < receivers.length; i++) {

      transfer(receivers[i], amounts[i]);

    }

  }



--------------------

Initial State:



Account: [CREATOR], balance: 0x2000300000001501, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: HYDROGEN

Function name: unhandledsend_unchk14(address)

PC address: 3117

Estimated Gas Usage: 1111 - 35299

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_28.sol:239



callee.send(5 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x40000000244e00010, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x4563918244f40000

Caller: [CREATOR], function: unhandledsend_unchk2(address), txdata: 0xf0808d1e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: HYDROGEN

Function name: unhandledsend_unchk14(address)

PC address: 3117

Estimated Gas Usage: 1111 - 35299

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_28.sol:239



callee.send(5 ether)



--------------------

Initial State:



Account: [CREATOR], balance: 0x40200000002b810e4, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x4563918244f40000

Caller: [ATTACKER], function: unhandledsend_unchk2(address), txdata: 0xf0808d1e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: HYDROGEN

Function name: cash_unchk34(uint256,uint256,address)

PC address: 3162

Estimated Gas Usage: 1155 - 35343

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_28.sol:58



winner_unchk34.send(subpot_unchk34)



--------------------

Initial State:



Account: [CREATOR], balance: 0x14001200000801000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x8000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000

Caller: [ATTACKER], function: cash_unchk34(uint256,uint256,address), txdata: 0x2b2f46d1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: HYDROGEN

Function name: cash_unchk34(uint256,uint256,address)

PC address: 3162

Estimated Gas Usage: 1155 - 35343

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_28.sol:58



winner_unchk34.send(subpot_unchk34)



--------------------

Initial State:



Account: [CREATOR], balance: 0x420d0039ca4930400, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x40010423500004042, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x8ac7230489e80000

Caller: [ATTACKER], function: cash_unchk34(uint256,uint256,address), txdata: 0x2b2f46d100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: HYDROGEN

Function name: my_func_unchk35(address)

PC address: 3582

Estimated Gas Usage: 1117 - 35305

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_28.sol:53



dst.send(msg.value)



--------------------

Initial State:



Account: [CREATOR], balance: 0x10000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: my_func_unchk35(address), txdata: 0x8bd3d0d70000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: HYDROGEN

Function name: symbol()

PC address: 3691

Estimated Gas Usage: 2432 - 4173

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_28.sol:87



return _symbol



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: HYDROGEN

Function name: my_func_uncheck12(address)

PC address: 4213

Estimated Gas Usage: 1128 - 35599

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_28.sol:258



dst.call.value(msg.value)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x10000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: my_func_uncheck12(address), txdata: 0xde7df662000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: HYDROGEN

Function name: my_func_uncheck12(address)

PC address: 4213

Estimated Gas Usage: 1128 - 35599

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_28.sol:258



dst.call.value(msg.value)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x4000000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: my_func_uncheck12(address), txdata: 0xde7df6620000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: HYDROGEN

Function name: decreaseAllowance(address,uint256)

PC address: 4292

Estimated Gas Usage: 1354 - 1829

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_28.sol:244



_allowed[msg.sender][spender].sub(subtractedValue)



--------------------

Initial State:



Account: [CREATOR], balance: 0x420fff0050205a180, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x40000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000002020202010202040101010240200808010201020000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: HYDROGEN

Function name: findtwoPercent(uint256)

PC address: 4313

Estimated Gas Usage: 1129 - 1224

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_28.sol:44



add(a,m)



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: findtwoPercent(uint256), txdata: 0x8ded4587ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c, value: 0x0





