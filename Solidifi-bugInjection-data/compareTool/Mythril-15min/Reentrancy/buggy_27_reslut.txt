==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: Ownable

Function name: withdrawFunds_re_ent38(uint256)

PC address: 349

Estimated Gas Usage: 7812 - 62663

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:76



msg.sender.call.value(_weiToWithdraw)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x2000000000042720, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x800, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdrawFunds_re_ent13(uint256), txdata: 0x6658c94a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent38(uint256), txdata: 0x25fbee580000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: Ownable

Function name: withdrawFunds_re_ent38(uint256)

PC address: 349

Estimated Gas Usage: 7812 - 62663

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_27.sol:76



msg.sender.call.value(_weiToWithdraw)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x432f6, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdrawFunds_re_ent13(uint256), txdata: 0x6658c94a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent38(uint256), txdata: 0x25fbee580000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: Ownable

Function name: withdrawFunds_re_ent38(uint256)

PC address: 421

Estimated Gas Usage: 7812 - 62663

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:77



balances_re_ent38[msg.sender] -= _weiToWithdraw



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent38(uint256), txdata: 0x25fbee580000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: Ownable

Function name: withdrawFunds_re_ent38(uint256)

PC address: 428

Estimated Gas Usage: 7812 - 62663

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:77



balances_re_ent38[msg.sender] -= _weiToWithdraw



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent38(uint256), txdata: 0x25fbee580000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: Ownable

Function name: withdrawFunds_re_ent13(uint256)

PC address: 568

Estimated Gas Usage: 7881 - 62732

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:62



msg.sender.call.value(_weiToWithdraw)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x20c0000002002c00, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent13(uint256), txdata: 0x6658c94a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent13(uint256), txdata: 0x6658c94a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: Ownable

Function name: withdrawFunds_re_ent13(uint256)

PC address: 653

Estimated Gas Usage: 7881 - 62732

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:64



balances_re_ent13[msg.sender] -= _weiToWithdraw



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent13(uint256), txdata: 0x6658c94a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: Ownable

Function name: withdrawFunds_re_ent13(uint256)

PC address: 659

Estimated Gas Usage: 7881 - 62732

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:64



balances_re_ent13[msg.sender] -= _weiToWithdraw



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent13(uint256), txdata: 0x6658c94a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: name()

PC address: 4349

Estimated Gas Usage: 2456 - 4197

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:122



return _name



--------------------

Initial State:



Account: [CREATOR], balance: 0x80000080000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: multiTransfer(address[],uint256[])

PC address: 5142

Estimated Gas Usage: 994 - 6825

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_27.sol:533



i = 0; i < receivers.length; i++) {

      transfer(receivers[i], amounts[i]);

    }

  }

mapping(address => uint) userBalance_re_ent26;

function withdrawBalance_re_ent26() public{

        // 



--------------------

Initial State:



Account: [CREATOR], balance: 0x1000000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdrawFunds_re_ent38(uint256)

PC address: 5970

Estimated Gas Usage: 7969 - 62820

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:76



msg.sender.call.value(_weiToWithdraw)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent38(uint256), txdata: 0x25fbee580000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent38(uint256)

PC address: 5970

Estimated Gas Usage: 7969 - 62820

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_27.sol:76



msg.sender.call.value(_weiToWithdraw)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: withdrawFunds_re_ent38(uint256), txdata: 0x25fbee580000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent38(uint256)

PC address: 6042

Estimated Gas Usage: 7969 - 62820

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:77



balances_re_ent38[msg.sender] -= _weiToWithdraw



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent38(uint256), txdata: 0x25fbee580000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent38(uint256)

PC address: 6049

Estimated Gas Usage: 7969 - 62820

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:77



balances_re_ent38[msg.sender] -= _weiToWithdraw



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent38(uint256), txdata: 0x25fbee580000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: withdrawBalance_re_ent19()

PC address: 6883

Estimated Gas Usage: 1936 - 2221

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:739



ToWithdraw)(""); //Reentrancy b



--------------------

Initial State:



Account: [CREATOR], balance: 0x204000000000020, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdrawBalance_re_ent19(), txdata: 0x4ca6972a, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdraw_balances_re_ent36()

PC address: 7272

Estimated Gas Usage: 7033 - 61884

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:117



msg.sender.call.value(balances_re_ent36[msg.sender ])("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent36(), txdata: 0x54611e35, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: DanPanCoin

Function name: withdraw_balances_re_ent36()

PC address: 7272

Estimated Gas Usage: 7033 - 61884

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_27.sol:117



msg.sender.call.value(balances_re_ent36[msg.sender ])("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: withdraw_balances_re_ent36(), txdata: 0x54611e35, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdraw_balances_re_ent36()

PC address: 7343

Estimated Gas Usage: 7033 - 61884

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:118



balances_re_ent36[msg.sender] = 0



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent36(), txdata: 0x54611e35, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdrawFunds_re_ent24(uint256)

PC address: 7390

Estimated Gas Usage: 7946 - 62797

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:623



] -= _weiToWithdraw;

    }



  function in



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent24(uint256), txdata: 0x5700ec4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent24(uint256)

PC address: 7390

Estimated Gas Usage: 7946 - 62797

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_27.sol:623



] -= _weiToWithdraw;

    }



  function in



--------------------

Initial State:



Account: [CREATOR], balance: 0x420c1000002000002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent24(uint256), txdata: 0x5700ec4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent24(uint256)

PC address: 7462

Estimated Gas Usage: 7946 - 62797

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:626



int256 addedValue) public returns (bool) {

    



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent24(uint256), txdata: 0x5700ec4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent24(uint256)

PC address: 7469

Estimated Gas Usage: 7946 - 62797

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:626



int256 addedValue) public returns (bool) {

    



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent24(uint256), txdata: 0x5700ec4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdrawFunds_re_ent13(uint256)

PC address: 7749

Estimated Gas Usage: 8037 - 62888

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:62



msg.sender.call.value(_weiToWithdraw)("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent13(uint256), txdata: 0x6658c94a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent13(uint256)

PC address: 7834

Estimated Gas Usage: 8037 - 62888

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:64



balances_re_ent13[msg.sender] -= _weiToWithdraw



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent13(uint256), txdata: 0x6658c94a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent13(uint256)

PC address: 7840

Estimated Gas Usage: 8037 - 62888

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:64



balances_re_ent13[msg.sender] -= _weiToWithdraw



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent13(uint256), txdata: 0x6658c94a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdrawBalance_re_ent40()

PC address: 7941

Estimated Gas Usage: 7061 - 61912

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:295



  if( ! success ){

            revert();

        }

        



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawBalance_re_ent40()

PC address: 8025

Estimated Gas Usage: 7061 - 61912

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:300



der;

address payable lastPlayer_re_e



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdraw_balances_re_ent11()

PC address: 8821

Estimated Gas Usage: 7050 - 61901

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:325



lances_re_ent11[msg.sender] = 0;





--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent11(), txdata: 0x8cb21c8e, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdraw_balances_re_ent11()

PC address: 8900

Estimated Gas Usage: 7050 - 61901

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:327



ed previousDanPan, address indexe



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent11(), txdata: 0x8cb21c8e, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdrawFunds_re_ent17(uint256)

PC address: 9082

Estimated Gas Usage: 7972 - 62823

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:792



itelisted(address _from, address _to) int



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent17(uint256), txdata: 0x8d18e1e80000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent17(uint256)

PC address: 9167

Estimated Gas Usage: 7972 - 62823

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:794



rom[_from]||whitelistTo[_to];

}

mapping (addres



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent17(uint256), txdata: 0x8d18e1e80000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent17(uint256)

PC address: 9173

Estimated Gas Usage: 7972 - 62823

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:794



rom[_from]||whitelistTo[_to];

}

mapping (addres



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent17(uint256), txdata: 0x8d18e1e80000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdrawBalance_re_ent26()

PC address: 9220

Estimated Gas Usage: 7128 - 61979

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:543



            revert();

        }

        userBalance_re_ent2



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawBalance_re_ent26()

PC address: 9304

Estimated Gas Usage: 7128 - 61979

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:548



returns (bool) {

    require(spender



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: withdrawBalance_re_ent9()

PC address: 9351

Estimated Gas Usage: 1913 - 2198

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:182



me+60 days);



        if (amo



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdrawBalance_re_ent9(), txdata: 0x91901c62, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: symbol()

PC address: 9493

Estimated Gas Usage: 2476 - 4217

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:134



return _symbol



--------------------

Initial State:



Account: [CREATOR], balance: 0x6400000044008, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdraw_balances_re_ent21()

PC address: 9593

Estimated Gas Usage: 7107 - 61958

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:651



   balances_re_ent21[msg.sender] = 0;

      }



  function



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent21(), txdata: 0x96c176f9, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdraw_balances_re_ent21()

PC address: 9672

Estimated Gas Usage: 7107 - 61958

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:654



{

    require(amount != 0);

    _



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent21(), txdata: 0x96c176f9, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdrawFunds_re_ent31(uint256)

PC address: 10133

Estimated Gas Usage: 7968 - 62819

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:410



] -= _weiToWithdraw;

    }



  function ba



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent31(uint256), txdata: 0xa112c6150000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent31(uint256)

PC address: 10133

Estimated Gas Usage: 7968 - 62819

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_27.sol:410



] -= _weiToWithdraw;

    }



  function ba



--------------------

Initial State:



Account: [CREATOR], balance: 0x401c10801020a0581, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdrawFunds_re_ent31(uint256), txdata: 0xa112c6150000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent31(uint256)

PC address: 10205

Estimated Gas Usage: 7968 - 62819

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:413



 returns (uint256) {

    return _balances[owner



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent31(uint256), txdata: 0xa112c6150000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent31(uint256)

PC address: 10212

Estimated Gas Usage: 7968 - 62819

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:413



 returns (uint256) {

    return _balances[owner



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent31(uint256), txdata: 0xa112c6150000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdrawFunds_re_ent3(uint256)

PC address: 10490

Estimated Gas Usage: 7970 - 62821

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:440



lances_re_ent3[msg.sender] -= _weiToWithd



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent3(uint256)

PC address: 10575

Estimated Gas Usage: 7970 - 62821

Read of persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:443



view returns (uint256)  {

    uint256 roundVal



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawFunds_re_ent3(uint256)

PC address: 10581

Estimated Gas Usage: 7970 - 62821

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:443



view returns (uint256)  {

    uint256 roundVal



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawFunds_re_ent3(uint256), txdata: 0xa4e80ee00000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdrawBalance_re_ent33()

PC address: 11727

Estimated Gas Usage: 7082 - 61933

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:152



msg.sender.call.value(userBalance_re_ent33[msg.sender])("")



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdrawBalance_re_ent33()

PC address: 11811

Estimated Gas Usage: 7082 - 61933

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:156



userBalance_re_ent33[msg.sender] = 0



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdraw_balances_re_ent29()

PC address: 12037

Estimated Gas Usage: 7076 - 61927

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:451



[msg.sender] = 0;

      }

  function findDPPercent(uint25



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent29(), txdata: 0xe8a53b87, value: 0x0



==== Unchecked return value from external call. ====

SWC ID: 104

Severity: Medium

Contract: DanPanCoin

Function name: withdraw_balances_re_ent29()

PC address: 12037

Estimated Gas Usage: 7076 - 61927

The return value of a message call is not checked.

External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.

--------------------

In file: buggy_27.sol:451



[msg.sender] = 0;

      }

  function findDPPercent(uint25



--------------------

Initial State:



Account: [CREATOR], balance: 0x401c1080002038400, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_balances_re_ent29(), txdata: 0xe8a53b87, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdraw_balances_re_ent29()

PC address: 12108

Estimated Gas Usage: 7076 - 61927

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:453



(uint256)  {

    uint256 roundVal



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent29(), txdata: 0xe8a53b87, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: buyTicket_re_ent12()

PC address: 12214

Estimated Gas Usage: 14348 - 88819

Read of persistent state following external call

The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:311





    }

  event DanPanPercentChan



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: buyTicket_re_ent12(), txdata: 0xe9d0bb81, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: buyTicket_re_ent12()

PC address: 12228

Estimated Gas Usage: 14348 - 88819

Write to persistent state following external call

The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:311





    }

  event DanPanPercentChan



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: buyTicket_re_ent12(), txdata: 0xe9d0bb81, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: buyTicket_re_ent12()

PC address: 12233

Estimated Gas Usage: 14348 - 88819

Write to persistent state following external call

The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:313



256 previousDanPanPercent, uint256 newDanPa



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: buyTicket_re_ent12(), txdata: 0xe9d0bb81, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: withdraw_balances_re_ent1()

PC address: 12290

Estimated Gas Usage: 7047 - 61898

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: buggy_27.sol:360



sender] = 0;

     }

  event White



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Medium

Contract: DanPanCoin

Function name: withdraw_balances_re_ent1()

PC address: 12369

Estimated Gas Usage: 7047 - 61898

Write to persistent state following external call

The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:364



/ fee whitelist

  mapping(addres



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: withdraw_balances_re_ent1(), txdata: 0xf0b6e306, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: buyTicket_re_ent2()

PC address: 12648

Estimated Gas Usage: 14347 - 88818

Read of persistent state following external call

The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:712



unt, uint256 amount) external {



--------------------

Initial State:



Account: [CREATOR], balance: 0x2001180000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: buyTicket_re_ent2(), txdata: 0xfb7e0819, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: buyTicket_re_ent2()

PC address: 12662

Estimated Gas Usage: 14347 - 88818

Write to persistent state following external call

The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:712



unt, uint256 amount) external {



--------------------

Initial State:



Account: [CREATOR], balance: 0x2001180000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: buyTicket_re_ent2(), txdata: 0xfb7e0819, value: 0x0



==== State access after external call ====

SWC ID: 107

Severity: Low

Contract: DanPanCoin

Function name: buyTicket_re_ent2()

PC address: 12667

Estimated Gas Usage: 14347 - 88818

Write to persistent state following external call

The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.

--------------------

In file: buggy_27.sol:713



uire(amount <= _allowed[account][msg.sende



--------------------

Initial State:



Account: [CREATOR], balance: 0x2001180000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: buyTicket_re_ent2(), txdata: 0xfb7e0819, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: decreaseAllowance(address,uint256)

PC address: 12815

Estimated Gas Usage: 1331 - 1806

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_27.sol:644



g.sender][spender]);

    return true;

  }

mapping(



--------------------

Initial State:



Account: [CREATOR], balance: 0x401c1080000008000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000002000100000002020000000000020202000002000000000000000000000000000000000000000000000000200000000000000001, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: findDPPercent(uint256)

PC address: 12903

Estimated Gas Usage: 1216 - 1311

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_27.sol:44



add(a,m)



--------------------

Initial State:



Account: [CREATOR], balance: 0xc10c0000000892, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: findDPPercent(uint256), txdata: 0xa5948fdbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: findOnePercent(uint256)

PC address: 12903

Estimated Gas Usage: 1260 - 1355

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_27.sol:44



add(a,m)



--------------------

Initial State:



Account: [CREATOR], balance: 0x41080002000081, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: findOnePercent(uint256), txdata: 0xa6a68606ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0, value: 0x0





