{
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SmartCheck",
          "fullDescription": {
            "text": "Securify automatically checks for vulnerabilities and bad coding practices. It runs lexical and syntactical analysis on Solidity source code."
          },
          "informationUri": "https://tool.smartdec.net/",
          "rules": [
            {
              "id": "Ignore_19",
              "name": "IgnoreVulnerability",
              "shortDescription": {
                "text": "SOLIDITY_ADDRESS_HARDCODED"
              }
            },
            {
              "id": "Ignore_28",
              "name": "IgnoreVulnerability",
              "shortDescription": {
                "text": "SOLIDITY_PRAGMAS_VERSION"
              }
            },
            {
              "id": "Ignore_29",
              "name": "IgnoreVulnerability",
              "shortDescription": {
                "text": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA"
              }
            },
            {
              "id": "Ignore_33",
              "name": "IgnoreVulnerability",
              "shortDescription": {
                "text": "SOLIDITY_SHOULD_NOT_BE_PURE"
              }
            },
            {
              "id": "Ignore_37",
              "name": "IgnoreVulnerability",
              "shortDescription": {
                "text": "SOLIDITY_USING_INLINE_ASSEMBLY"
              }
            }
          ],
          "version": "0.0.12"
        }
      },
      "artifacts": [
        {
          "location": {
            "uri": "/Sol/43.sol"
          },
          "sourceLanguage": "Solidity"
        }
      ],
      "logicalLocations": [
        {
          "kind": "contract",
          "name": "43"
        }
      ],
      "results": [
        {
          "message": {
            "text": "SOLIDITY_ADDRESS_HARDCODED"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/Sol/43.sol"
                },
                "region": {
                  "snippet": {
                    "text": "_operator=address(0)"
                  },
                  "startColumn": 8,
                  "startLine": 42
                }
              }
            }
          ],
          "ruleId": "Ignore_19"
        },
        {
          "message": {
            "text": "SOLIDITY_PRAGMAS_VERSION"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/Sol/43.sol"
                },
                "region": {
                  "snippet": {
                    "text": "^"
                  },
                  "startColumn": 16,
                  "startLine": 3
                }
              }
            }
          ],
          "ruleId": "Ignore_28"
        },
        {
          "message": {
            "text": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/Sol/43.sol"
                },
                "region": {
                  "snippet": {
                    "text": "private"
                  },
                  "startColumn": 12,
                  "startLine": 21
                }
              }
            }
          ],
          "ruleId": "Ignore_29"
        },
        {
          "message": {
            "text": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/Sol/43.sol"
                },
                "region": {
                  "snippet": {
                    "text": "private"
                  },
                  "startColumn": 9,
                  "startLine": 22
                }
              }
            }
          ],
          "ruleId": "Ignore_29"
        },
        {
          "message": {
            "text": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/Sol/43.sol"
                },
                "region": {
                  "snippet": {
                    "text": "private"
                  },
                  "startColumn": 14,
                  "startLine": 171
                }
              }
            }
          ],
          "ruleId": "Ignore_29"
        },
        {
          "message": {
            "text": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/Sol/43.sol"
                },
                "region": {
                  "snippet": {
                    "text": "private"
                  },
                  "startColumn": 12,
                  "startLine": 194
                }
              }
            }
          ],
          "ruleId": "Ignore_29"
        },
        {
          "message": {
            "text": "SOLIDITY_SHOULD_NOT_BE_PURE"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/Sol/43.sol"
                },
                "region": {
                  "snippet": {
                    "text": "function_splitMultiHash(bytesmemorysource)internalpurereturns(MultiHashmemory){require(source.length==34,\"length of source must be 34\");uint8hashFunction=uint8(source[0]);uint8digestSize=uint8(source[1]);bytes32hash;assembly{hash:=mload(add(source,34))}return(MultiHash({hashFunction:hashFunction,digestSize:digestSize,hash:hash}));}"
                  },
                  "startColumn": 4,
                  "startLine": 119
                }
              }
            }
          ],
          "ruleId": "Ignore_33"
        },
        {
          "message": {
            "text": "SOLIDITY_USING_INLINE_ASSEMBLY"
          },
          "level": "warning",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/Sol/43.sol"
                },
                "region": {
                  "snippet": {
                    "text": "assembly{hash:=mload(add(source,34))}"
                  },
                  "startColumn": 8,
                  "startLine": 126
                }
              }
            }
          ],
          "ruleId": "Ignore_37"
        }
      ]
    }
  ],
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json"
}