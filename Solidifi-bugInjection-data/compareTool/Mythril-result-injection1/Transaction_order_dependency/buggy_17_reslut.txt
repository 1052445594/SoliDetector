==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: AZT

Function name: constructor

PC address: 342

Estimated Gas Usage: 190353 - 797849

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_17.sol:271



constructor(string memory tokenName, string memory tokenSymbol, uint8 dec) public {

    decimals = dec;

    name = tokenName;                                   // Set the name for display purposes

    symbol = tokenSymbol;   

  }



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: AZT

Function name: constructor

PC address: 484

Estimated Gas Usage: 190353 - 797849

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_17.sol:271



constructor(string memory tokenName, string memory tokenSymbol, uint8 dec) public {

    decimals = dec;

    name = tokenName;                                   // Set the name for display purposes

    symbol = tokenSymbol;   

  }



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: AZT

Function name: constructor

PC address: 877

Estimated Gas Usage: 190353 - 797849

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_17.sol:533



now + 1 * 1 hours



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: AZT

Function name: frozenAddresses(uint256)

PC address: 6674

Estimated Gas Usage: 1095 - 1190

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_17.sol:480



address[] public frozenAddresses



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: frozenAddresses(uint256), txdata: 0x5506ed440000000000000000000000000000000000000000000000000000000000000001, value: 0x0





