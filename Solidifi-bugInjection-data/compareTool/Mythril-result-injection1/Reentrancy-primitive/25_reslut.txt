==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: WhiteBetting

Function name: _function_0x00000003

PC address: 2693

Estimated Gas Usage: 3096 - 3761

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: 25.sol:123



require( now < ( gameList[_fixtureId].timestamp  - 10 minutes ) )



--------------------

Initial State:



Account: [CREATOR], balance: 0x4020000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: setGameInfo(uint64,uint256,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint32,uint8), txdata: 0xd4cad6davalue: 0x0

Caller: [CREATOR], function: placeBet(uint64,uint16,uint32), txdata: 0x061e3fef000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000001810120, value: 0x38d7ea4c68000



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: WhiteBetting

Function name: betList(uint64,uint256)

PC address: 3365

Estimated Gas Usage: 1190 - 1475

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: 25.sol:41



mapping(uint64 => BetFixture[]) public betList



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: betList(uint64,uint256), txdata: 0x553016cd00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: WhiteBetting

Function name: _function_0x00000003

PC address: 3752

Estimated Gas Usage: 3817 - 4482

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: 25.sol:132



function givePrizeMoney(uint64 _fixtureId, uint8 _homeDrawAway, uint8 _overUnder) external onlyOwner payable {

    // Check the game status whether is opening

    require(gameList[_fixtureId].open_status == 3);

    // Check if it has ever compensated

    require(gameList[_fixtureId].isDone == false);

    // Check if it has any player who betted

    require(betList[_fixtureId][0].player != address(0) );



    // Give the prize money!

    for (uint i= 0 ; i < betList[_fixtureId].length; i++){

      uint16 selectedTeam = betList[_fixtureId][i].selectedTeam;

      uint256 returnEth = (betList[_fixtureId][i].stake * betList[_fixtureId][i].odd) / 1000 ;

      if ( (selectedTeam == 1 && _homeDrawAway == 1) 

        || (selectedTeam == 2 && _homeDrawAway == 2) 

        || (selectedTeam == 3 && _homeDrawAway == 3) 

        || (selectedTeam == 4 && _overUnder == 1) 

        || (selectedTeam == 5 && _overUnder == 2) 

        || (selectedTeam == 6 && ( _homeDrawAway == 1 || _homeDrawAway == 2) )

        || (selectedTeam == 7 && ( _homeDrawAway == 1 || _homeDrawAway == 3) )

        || (selectedTeam == 8 && ( _homeDrawAway == 3 || _homeDrawAway == 2) ) 

        ){ 

        betList[_fixtureId][i].player.transfer(returnEth);

      }

    }



    // Change the game status.

    gameList[_fixtureId].open_status = 5;

    // It was paid.

    gameList[_fixtureId].isDone = true; // 보상을 마쳤으므로 true로 변경.



    emit GivePrizeMoney( _fixtureId,  _homeDrawAway,  _overUnder);

  }



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: setOpenStatus(uint64,uint8), txdata: 0x616664fc00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003, value: 0x0

Caller: [CREATOR], function: givePrizeMoney(uint64,uint8,uint8), txdata: 0x5f258f57000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0





