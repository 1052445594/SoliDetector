==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou18(address,uint256)

PC address: 3031

Estimated Gas Usage: 12202 - 52863

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:317



balances_intou18[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0xa, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou18(address,uint256), txdata: 0x1fa78c9900000000000000000000000000400000000100010110100004000000000000000101000001000000010000000000002000000000000100010002000100010001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou18(address,uint256)

PC address: 3056

Estimated Gas Usage: 12202 - 52863

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:318



balances_intou18[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x410400000fbfbe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou18(address,uint256), txdata: 0x1fa78c99000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: ChannelWallet

Function name: withdraw_intou17()

PC address: 3103

Estimated Gas Usage: 1105 - 1390

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_6.sol:340



require(now > lockTime_intou17[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: ChannelWallet

Function name: withdraw_intou29()

PC address: 3129

Estimated Gas Usage: 1889 - 36267

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_6.sol:342



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1c, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou29(), txdata: 0x9f868ee0, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: ChannelWallet

Function name: withdraw_intou25()

PC address: 3129

Estimated Gas Usage: 1890 - 36268

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_6.sol:342



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0xe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffffe, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou25(), txdata: 0x835185a4, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: ChannelWallet

Function name: withdraw_intou33()

PC address: 3129

Estimated Gas Usage: 1912 - 36290

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_6.sol:342



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0x16, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffffe, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: ChannelWallet

Function name: withdraw_intou17()

PC address: 3129

Estimated Gas Usage: 1913 - 36291

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_6.sol:342



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0x12, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffffc, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: ChannelWallet

Function name: withdraw_ovrflow1()

PC address: 3129

Estimated Gas Usage: 1933 - 36311

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_6.sol:342



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0x12, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffffa, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_ovrflow1(), txdata: 0x76be3cd1, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: ChannelWallet

Function name: withdraw_intou21()

PC address: 3129

Estimated Gas Usage: 1935 - 36313

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_6.sol:342



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1a, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou21(), txdata: 0x81bb4758, value: 0x0



==== Unprotected Ether Withdrawal ====

SWC ID: 105

Severity: High

Contract: ChannelWallet

Function name: withdraw_intou13()

PC address: 3129

Estimated Gas Usage: 1956 - 36334

Any sender can withdraw Ether from the contract account.

Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.

--------------------

In file: buggy_6.sol:342



msg.sender.transfer(transferValue_intou17)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1d, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0xa

Caller: [ATTACKER], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_undrflow2(address,uint256)

PC address: 3176

Estimated Gas Usage: 12179 - 52840

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:291



balances_intou2[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x40308802000800415, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transfer_undrflow2(address,uint256), txdata: 0x37ae6b7300000000000000000000000001010110000400020000000000000000000210040000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_undrflow2(address,uint256)

PC address: 3201

Estimated Gas Usage: 12179 - 52840

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:292



balances_intou2[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x200, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transfer_undrflow2(address,uint256), txdata: 0x37ae6b73000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffea7fffffffffbf7f8000000000000000040000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou34(address,uint256)

PC address: 3240

Estimated Gas Usage: 12136 - 52797

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:21



balances_intou34[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x207bfb8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou34(address,uint256), txdata: 0x46852dfc00000000000000000000000000100101000200040402020000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou34(address,uint256)

PC address: 3264

Estimated Gas Usage: 12136 - 52797

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:22



balances_intou34[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x50014010094, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou34(address,uint256), txdata: 0x46852dfc000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou26(address,uint256)

PC address: 3290

Estimated Gas Usage: 12158 - 52819

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:161



balances_intou26[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x7bfba, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou26(address,uint256), txdata: 0x46aa924300000000000000000000000001100401000200020402040001020404040202020000000000010000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou26(address,uint256)

PC address: 3315

Estimated Gas Usage: 12158 - 52819

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:162



balances_intou26[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x400000dbffe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou26(address,uint256), txdata: 0x46aa9243000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: ChannelWallet

Function name: withdraw_intou13()

PC address: 3375

Estimated Gas Usage: 1148 - 1433

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_6.sol:47



require(now > lockTime_intou13[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x4, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: ChannelWallet

Function name: withdraw_ovrflow1()

PC address: 3505

Estimated Gas Usage: 1125 - 1410

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_6.sol:277



require(now > lockTime_intou1[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x4000fbebc, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_ovrflow1(), txdata: 0x76be3cd1, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: ChannelWallet

Function name: withdraw_intou21()

PC address: 3556

Estimated Gas Usage: 1127 - 1412

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_6.sol:227



require(now > lockTime_intou21[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x4, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou21(), txdata: 0x81bb4758, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: ChannelWallet

Function name: withdraw_intou25()

PC address: 3583

Estimated Gas Usage: 1082 - 1367

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_6.sol:176



require(now > lockTime_intou25[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x4, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou25(), txdata: 0x835185a4, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: ChannelWallet

Function name: withdraw_intou29()

PC address: 4314

Estimated Gas Usage: 1081 - 1366

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_6.sol:130



require(now > lockTime_intou29[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou29(), txdata: 0x9f868ee0, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou14(address,uint256)

PC address: 4364

Estimated Gas Usage: 12200 - 52861

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:36



balances_intou14[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x3a000000000008000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou14(address,uint256), txdata: 0xaefa551900000000000000000000000000000000000000000000001000000000000000400010101010010000000040000000040000001010001010100010100110100001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou14(address,uint256)

PC address: 4389

Estimated Gas Usage: 12200 - 52861

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:37



balances_intou14[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transfer_intou14(address,uint256), txdata: 0xaefa5519000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffefa9fffefef210fe5ab33fff62000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: ChannelWallet

Function name: withdraw_intou33()

PC address: 4442

Estimated Gas Usage: 1104 - 1389

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_6.sol:251



require(now > lockTime_intou33[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x4002080680120c0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou30(address,uint256)

PC address: 4599

Estimated Gas Usage: 12200 - 52861

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:88



balances_intou30[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x207bfb8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000040001000000000200000104020202020000000001000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou30(address,uint256)

PC address: 4624

Estimated Gas Usage: 12200 - 52861

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:89



balances_intou30[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x109080012000840, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou30(address,uint256), txdata: 0xc036563e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefc000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou10(address,uint256)

PC address: 4652

Estimated Gas Usage: 12134 - 52795

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:266



balances_intou10[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x2bbba, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou10(address,uint256), txdata: 0xc176237300000000000000000000000000000000001000010401010000020001011004010000000000000100000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou10(address,uint256)

PC address: 4677

Estimated Gas Usage: 12134 - 52795

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:267



balances_intou10[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x1c10000000a1dd4, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou10(address,uint256), txdata: 0xc1762373000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeeff1c1802800ffff6a95c45ff9de0a000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou22(address,uint256)

PC address: 4723

Estimated Gas Usage: 12200 - 52861

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:211



balances_intou22[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x7bfb8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou22(address,uint256), txdata: 0xd7f8581a00000000000000000000000002000000000002000000000200020480201004010000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: ChannelWallet

Function name: transfer_intou22(address,uint256)

PC address: 4748

Estimated Gas Usage: 12200 - 52861

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_6.sol:212



balances_intou22[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x21c00c04020783fe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou22(address,uint256), txdata: 0xd7f8581a000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac000000000000000000000000000000000000000000000000000000000000000, value: 0x0





