==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: RaffleTokenExchange

Function name: transfer_intou18(address,uint256)

PC address: 2615

Estimated Gas Usage: 12157 - 52818

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_29.sol:325



balances_intou18[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou18(address,uint256), txdata: 0x1fa78c9900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: RaffleTokenExchange

Function name: transfer_intou18(address,uint256)

PC address: 2640

Estimated Gas Usage: 12157 - 52818

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_29.sol:326



balances_intou18[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x82, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transfer_intou18(address,uint256), txdata: 0x1fa78c99000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffec000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: RaffleTokenExchange

Function name: withdraw_intou17()

PC address: 2693

Estimated Gas Usage: 1060 - 1345

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_29.sol:366



require(now > lockTime_intou17[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: RaffleTokenExchange

Function name: transfer_intou26(address,uint256)

PC address: 4033

Estimated Gas Usage: 12115 - 52776

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_29.sol:161



balances_intou26[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou26(address,uint256), txdata: 0x46aa924300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: RaffleTokenExchange

Function name: transfer_intou26(address,uint256)

PC address: 4058

Estimated Gas Usage: 12115 - 52776

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_29.sol:162



balances_intou26[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x207bffe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou26(address,uint256), txdata: 0x46aa9243000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: RaffleTokenExchange

Function name: withdraw_intou13()

PC address: 4087

Estimated Gas Usage: 1103 - 1388

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_29.sol:429



require(now > lockTime_intou13[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: RaffleTokenExchange

Function name: withdraw_ovrflow1()

PC address: 4165

Estimated Gas Usage: 1082 - 1367

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_29.sol:292



require(now > lockTime_intou1[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_ovrflow1(), txdata: 0x76be3cd1, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: RaffleTokenExchange

Function name: withdraw_intou21()

PC address: 4192

Estimated Gas Usage: 1126 - 1411

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_29.sol:217



require(now > lockTime_intou21[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0xffffe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou21(), txdata: 0x81bb4758, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: RaffleTokenExchange

Function name: withdraw_intou25()

PC address: 4219

Estimated Gas Usage: 1148 - 1433

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_29.sol:175



require(now > lockTime_intou25[msg.sender])



--------------------

Initial State:



Account: [CREATOR], balance: 0xf3ffe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: withdraw_intou25(), txdata: 0x835185a4, value: 0x0



==== Multiple Calls in a Single Transaction ====

SWC ID: 113

Severity: Low

Contract: RaffleTokenExchange

Function name: addListing(uint256,uint256)

PC address: 4584

Estimated Gas Usage: 32060 - 202386

Multiple calls are executed in the same transaction.

This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).

--------------------

In file: buggy_29.sol:375



raffleContract.allowance(msg.sender, address(this))



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: addListing(uint256,uint256), txdata: 0x836cf6e9a0000000000000000000000000000000000000000000000000000000080000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: RaffleTokenExchange

Function name: transfer_intou14(address,uint256)

PC address: 4919

Estimated Gas Usage: 12112 - 52773

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_29.sol:413



balances_intou14[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou14(address,uint256), txdata: 0xaefa551900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: RaffleTokenExchange

Function name: transfer_intou14(address,uint256)

PC address: 4944

Estimated Gas Usage: 12112 - 52773

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_29.sol:414



balances_intou14[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x401400401000fbffe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou14(address,uint256), txdata: 0xaefa5519000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaf000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: RaffleTokenExchange

Function name: transfer_intou10(address,uint256)

PC address: 5044

Estimated Gas Usage: 12200 - 52861

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_29.sol:281



balances_intou10[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0xa, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: transfer_intou10(address,uint256), txdata: 0xc176237300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: RaffleTokenExchange

Function name: transfer_intou10(address,uint256)

PC address: 5069

Estimated Gas Usage: 12200 - 52861

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_29.sol:282



balances_intou10[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x401020fbff8, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x4000000000000000, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou10(address,uint256), txdata: 0xc1762373000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeefcf477a6aec000000000000000000000000000000000000000000000000008000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: RaffleTokenExchange

Function name: transfer_intou22(address,uint256)

PC address: 5115

Estimated Gas Usage: 12155 - 52816

The arithmetic operator can underflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_29.sol:203



balances_intou22[msg.sender] -= _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: transfer_intou22(address,uint256), txdata: 0xd7f8581a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: RaffleTokenExchange

Function name: transfer_intou22(address,uint256)

PC address: 5140

Estimated Gas Usage: 12155 - 52816

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_29.sol:204



balances_intou22[_to] += _value



--------------------

Initial State:



Account: [CREATOR], balance: 0x400c04020fbfbe, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: transfer_intou22(address,uint256), txdata: 0xd7f8581a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8000000000000000000000000000000000000000000000000000000000000000, value: 0x0





