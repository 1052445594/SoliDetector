==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: tokenRecipient

Function name: receiveApproval(address,uint256,address,bytes)

PC address: 394

Estimated Gas Usage: 3561 - 43087

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: 36.sol:30



t.transferFrom(_from, address(this), _value)



--------------------

Initial State:



Account: [CREATOR], balance: 0x80, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb100000000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000003, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: proposals(uint256)

PC address: 2024

Estimated Gas Usage: 1051 - 1146

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: 36.sol:125



Proposal[] public proposals



--------------------

Initial State:



Account: [CREATOR], balance: 0x207bffd, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: proposals(uint256), txdata: 0x013cf08b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: executeProposal(uint256,bytes)

PC address: 2290

Estimated Gas Usage: 1472 - 4249

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: 36.sol:340



function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {

        Proposal storage p = proposals[proposalNumber];



        require(initialized);

        require(now > p.minExecutionDate                                             // If it is past the voting deadline

            && !p.executed                                                          // and it has not already been executed

            && p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))); // and the supplied code matches the proposal...





        // ...then tally the results

        uint quorum = 0;

        uint yea = 0;

        uint nay = 0;



        for (uint i = 0; i <  p.votes.length; ++i) {

            Vote storage v = p.votes[i];

            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);

            quorum += voteWeight;

            if (v.inSupport) {

                yea += voteWeight;

            } else {

                nay += voteWeight;

            }

        }



        Token t = Token(tokenAddress);

        require(quorum >= t.totalSupply().mul(minimumQuorum).div(100)); // Check if a minimum quorum has been reached



        if (yea > nay ) {

            // Proposal passed; execute the transaction



            p.executed = true;

            

            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);

            require(success);



            p.proposalPassed = true;

        } else {

            // Proposal failed

            p.proposalPassed = false;

        }



        // Fire Events

        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);

    }



--------------------

Initial State:



Account: [CREATOR], balance: 0x2b9c6dd56230d8000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: executeProposal(uint256,bytes), txdata: 0x237e949200000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== External Call To User-Supplied Address ====

SWC ID: 107

Severity: Low

Contract: MindsyncPlatform

Function name: receiveApproval(address,uint256,address,bytes)

PC address: 3642

Estimated Gas Usage: 3640 - 43166

A call to a user-supplied address is executed.

An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.

--------------------

In file: 36.sol:30



t.transferFrom(_from, address(this), _value)



--------------------

Initial State:



Account: [CREATOR], balance: 0x804000720e9, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: receiveApproval(address,uint256,address,bytes), txdata: 0x8f4ffcb1000000000000000000000000000000000000000000000000000000000000003f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: vote(uint256,bool)

PC address: 4720

Estimated Gas Usage: 4308 - 38965

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: 36.sol:314



function vote(

        uint proposalNumber,

        bool supportsProposal

    )

        onlyTokenholders public

        returns (uint voteID)

    {

        Proposal storage p = proposals[proposalNumber];

        require(p.voted[msg.sender] != true);



        voteID = p.votes.length++;

        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});

        p.voted[msg.sender] = true;

        p.numberOfVotes = voteID +1;

        emit Voted(proposalNumber,  supportsProposal, msg.sender);

        return voteID;

    }



--------------------

Initial State:



Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: vote(uint256,bool), txdata: 0xc9d27afe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: MindsyncPlatform

Function name: checkProposalCode(uint256,address,uint256,bytes)

PC address: 5349

Estimated Gas Usage: 1499 - 4276

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: 36.sol:266



function checkProposalCode(

        uint proposalNumber,

        address destination,

        uint weiAmount,

        bytes memory transactionBytecode

    )

        view public

        returns (bool codeChecksOut)

    {

        Proposal storage p = proposals[proposalNumber];

        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));

    }



--------------------

Initial State:



Account: [CREATOR], balance: 0x400485000a005a450, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: checkProposalCode(uint256,address,uint256,bytes), txdata: 0xeceb29450000000000000000000000000000000000000000000000000000000000000000001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0





