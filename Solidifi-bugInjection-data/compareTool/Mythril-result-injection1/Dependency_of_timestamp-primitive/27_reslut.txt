==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: decreaseAllowance(address,uint256)

PC address: 4865

Estimated Gas Usage: 1353 - 1828

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: 27.sol:284



_allowed[msg.sender][spender].sub(subtractedValue)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1c1080500001520, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000002040101010101010201020101010201040201010000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: findDPPercent(uint256)

PC address: 4953

Estimated Gas Usage: 1128 - 1223

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: 27.sol:44



add(a,m)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: findDPPercent(uint256), txdata: 0xa5948fdbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: findOnePercent(uint256)

PC address: 4953

Estimated Gas Usage: 1150 - 1245

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: 27.sol:44



add(a,m)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1080000000002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: findOnePercent(uint256), txdata: 0xa6a68606ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0, value: 0x0





