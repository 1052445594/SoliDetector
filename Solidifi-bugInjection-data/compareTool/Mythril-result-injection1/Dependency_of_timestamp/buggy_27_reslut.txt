==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: Ownable

Function name: bug_tmstmp32()

PC address: 275

Estimated Gas Usage: 172 - 267

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:78



require(now != pastBlockTime_tmstmp32)



--------------------

Initial State:



Account: [CREATOR], balance: 0x40000100000210, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: Ownable

Function name: bug_tmstmp32()

PC address: 290

Estimated Gas Usage: 201 - 296

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:80



if(now % 15 == 0) { // winner    //bug //Dependency_of_timestamp bug

            msg.sender.transfer(address(this).balance);

        }



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: bug_tmstmp20()

PC address: 3535

Estimated Gas Usage: 218 - 313

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:369



require(now != pastBlockTime_tmstmp20)



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: bug_tmstmp20()

PC address: 3550

Estimated Gas Usage: 247 - 342

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:371



if(now % 15 == 0) { // winner    //bug //Dependency_of_timestamp bug

            msg.sender.transfer(address(this).balance);

        }



--------------------

Initial State:



Account: [CREATOR], balance: 0x6281080440071098, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: name()

PC address: 3627

Estimated Gas Usage: 2456 - 4197

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:118



return _name



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: multiTransfer(address[],uint256[])

PC address: 4082

Estimated Gas Usage: 1060 - 6891

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_27.sol:351



function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {

    for (uint256 i = 0; i < receivers.length; i++) {

      transfer(receivers[i], amounts[i]);

    }

  }



--------------------

Initial State:



Account: [CREATOR], balance: 0x28841000320042022, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [CREATOR], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp7(uint256)

PC address: 4878

Estimated Gas Usage: 6171 - 26266

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:148



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp7(uint256), txdata: 0x2831fe30fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp7(uint256)

PC address: 4885

Estimated Gas Usage: 313 - 408

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:148



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp7 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp7(uint256), txdata: 0x2831fe300000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp15(uint256)

PC address: 4914

Estimated Gas Usage: 6193 - 26288

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:491



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp15(uint256), txdata: 0x2d79f3ccfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp15(uint256)

PC address: 4921

Estimated Gas Usage: 335 - 430

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:491



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp15 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp15(uint256), txdata: 0x2d79f3cc0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp26(uint256)

PC address: 4959

Estimated Gas Usage: 6165 - 26260

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:255



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0xb435c0000000002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp26(uint256), txdata: 0x35e7405ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp26(uint256)

PC address: 4965

Estimated Gas Usage: 309 - 404

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:255



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp26 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp26(uint256), txdata: 0x35e7405f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp30(uint256)

PC address: 4993

Estimated Gas Usage: 6187 - 26282

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:122



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x941580000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp30(uint256), txdata: 0x38861bd8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp30(uint256)

PC address: 4999

Estimated Gas Usage: 331 - 426

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:122



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp30 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp30(uint256), txdata: 0x38861bd80000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp34(uint256)

PC address: 5027

Estimated Gas Usage: 6122 - 26217

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:224



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0xbc7580000000002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp34(uint256), txdata: 0x38f45e36fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp34(uint256)

PC address: 5033

Estimated Gas Usage: 266 - 361

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:224



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp34 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp34(uint256), txdata: 0x38f45e360000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp10(uint256)

PC address: 5266

Estimated Gas Usage: 6121 - 26216

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:543



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x40000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp10(uint256), txdata: 0x5d2cadbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp10(uint256)

PC address: 5272

Estimated Gas Usage: 265 - 360

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:543



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp10 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp10(uint256), txdata: 0x5d2cadbf0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp3(uint256)

PC address: 5300

Estimated Gas Usage: 6148 - 26243

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:131



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp3(uint256), txdata: 0x621563ebfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp3(uint256)

PC address: 5307

Estimated Gas Usage: 290 - 385

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:131



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp3 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp3(uint256), txdata: 0x621563eb0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp23(uint256)

PC address: 5613

Estimated Gas Usage: 6127 - 26222

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:287



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp23(uint256), txdata: 0x7cd2ce0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp23(uint256)

PC address: 5620

Estimated Gas Usage: 269 - 364

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:287



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp23 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp23(uint256), txdata: 0x7cd2ce0f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp35(uint256)

PC address: 5649

Estimated Gas Usage: 6149 - 26244

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:219



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp35(uint256), txdata: 0x88d5cb7cfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp35(uint256)

PC address: 5656

Estimated Gas Usage: 291 - 386

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:219



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp35 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x2020, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp35(uint256), txdata: 0x88d5cb7c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp27(uint256)

PC address: 5685

Estimated Gas Usage: 6193 - 26288

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:247



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp27(uint256), txdata: 0x8d356d07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp27(uint256)

PC address: 5692

Estimated Gas Usage: 335 - 430

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:247



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp27 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x20, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp27(uint256), txdata: 0x8d356d070000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: symbol()

PC address: 5755

Estimated Gas Usage: 2454 - 4195

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:126



return _symbol



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: symbol(), txdata: 0x95d89b41, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp38(uint256)

PC address: 5832

Estimated Gas Usage: 6165 - 26260

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:189



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x20, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: play_tmstmp38(uint256), txdata: 0x975b58d9fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp38(uint256)

PC address: 5838

Estimated Gas Usage: 309 - 404

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:189



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp38 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp38(uint256), txdata: 0x975b58d90000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp31(uint256)

PC address: 5866

Estimated Gas Usage: 6200 - 26295

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:114



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp31(uint256), txdata: 0x99d8cc4dfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0004, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp31(uint256)

PC address: 5873

Estimated Gas Usage: 334 - 429

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:114



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp31 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp31(uint256), txdata: 0x99d8cc4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp18(uint256)

PC address: 5907

Estimated Gas Usage: 6121 - 26216

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:456



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x7400000002020, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp18(uint256), txdata: 0x9c37a567fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp18(uint256)

PC address: 5913

Estimated Gas Usage: 265 - 360

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:456



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp18 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x20020, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp18(uint256), txdata: 0x9c37a5670000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp2(uint256)

PC address: 5941

Estimated Gas Usage: 6143 - 26238

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:433



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x3435c0000000002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp2(uint256), txdata: 0x9d595776fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp2(uint256)

PC address: 5947

Estimated Gas Usage: 287 - 382

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:433



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp2 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp2(uint256), txdata: 0x9d5957760000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp19(uint256)

PC address: 5975

Estimated Gas Usage: 6170 - 26265

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:445



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp19(uint256), txdata: 0xa0c95111fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp19(uint256)

PC address: 5982

Estimated Gas Usage: 312 - 407

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:445



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp19 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x2020, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp19(uint256), txdata: 0xa0c951110000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp11(uint256)

PC address: 6929

Estimated Gas Usage: 6147 - 26242

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:534



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x2, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp11(uint256), txdata: 0xc99d77a1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp11(uint256)

PC address: 6936

Estimated Gas Usage: 289 - 384

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:534



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp11 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp11(uint256), txdata: 0xc99d77a10000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp22(uint256)

PC address: 6965

Estimated Gas Usage: 6164 - 26259

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:348



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1080000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: play_tmstmp22(uint256), txdata: 0xcf206f53fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0020, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp22(uint256)

PC address: 6971

Estimated Gas Usage: 308 - 403

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:348



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp22 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp22(uint256), txdata: 0xcf206f530000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp6(uint256)

PC address: 7042

Estimated Gas Usage: 6186 - 26281

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:153



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x3c75c0020000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp6(uint256), txdata: 0xe1a94fb0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp6(uint256)

PC address: 7048

Estimated Gas Usage: 330 - 425

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:153



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp6 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp6(uint256), txdata: 0xe1a94fb00000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp39(uint256)

PC address: 7076

Estimated Gas Usage: 6124 - 26219

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:184



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp39(uint256), txdata: 0xec91c7e1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp39(uint256)

PC address: 7083

Estimated Gas Usage: 266 - 361

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:184



if (startTime + (5 * 1 days) == _vtime){ //Dependency_of_timestamp bug

		winner_tmstmp39 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x0, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp39(uint256), txdata: 0xec91c7e10000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Integer Arithmetic Bugs ====

SWC ID: 101

Severity: High

Contract: DanPanCoin

Function name: play_tmstmp14(uint256)

PC address: 7112

Estimated Gas Usage: 6141 - 26236

The arithmetic operator can overflow.

It is possible to cause an integer overflow or underflow in the arithmetic operation. 

--------------------

In file: buggy_27.sol:501



startTime + (5 * 1 days)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1080000000001, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: play_tmstmp14(uint256), txdata: 0xecd97e16fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0



==== Dependence on predictable environment variable ====

SWC ID: 116

Severity: Low

Contract: DanPanCoin

Function name: play_tmstmp14(uint256)

PC address: 7118

Estimated Gas Usage: 285 - 380

A control flow decision is made based on The block.timestamp environment variable.

The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.

--------------------

In file: buggy_27.sol:501



if (startTime + (5 * 1 days) == block.timestamp){ //Dependency_of_timestamp bug

		winner_tmstmp14 = msg.sender;}



--------------------

Initial State:



Account: [CREATOR], balance: 0x2020, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: play_tmstmp14(uint256), txdata: 0xecd97e160000000000000000000000000000000000000000000000000000000000000000, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: decreaseAllowance(address,uint256)

PC address: 7419

Estimated Gas Usage: 1331 - 1806

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_27.sol:450



_allowed[msg.sender][spender].sub(subtractedValue)



--------------------

Initial State:



Account: [CREATOR], balance: 0x420c0080000000100, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000000000202020000000101010000010101000202020000000000000000000000000000000000000000000000000000000000000001, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: findDPPercent(uint256)

PC address: 7507

Estimated Gas Usage: 1194 - 1289

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_27.sol:44



add(a,m)



--------------------

Initial State:



Account: [CREATOR], balance: 0x4c1000000000002, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [SOMEGUY], function: findDPPercent(uint256), txdata: 0xa5948fdbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0, value: 0x0



==== Exception State ====

SWC ID: 110

Severity: Medium

Contract: DanPanCoin

Function name: findOnePercent(uint256)

PC address: 7507

Estimated Gas Usage: 1216 - 1311

An assertion violation was triggered.

It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).

--------------------

In file: buggy_27.sol:44



add(a,m)



--------------------

Initial State:



Account: [CREATOR], balance: 0x1010c000000400a, nonce:0, storage:{}

Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}



Transaction Sequence:



Caller: [CREATOR], calldata: , value: 0x0

Caller: [ATTACKER], function: findOnePercent(uint256), txdata: 0xa6a68606ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8, value: 0x0





